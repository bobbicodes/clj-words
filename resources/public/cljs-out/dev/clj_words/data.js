// Compiled by ClojureScript 1.10.339 {:static-fns true, :optimize-constants true}
goog.provide('clj_words.data');
goog.require('cljs.core');
goog.require('cljs.core.constants');
clj_words.data.fn_map = cljs.core.PersistentHashMap.fromArrays(["butlast","re-pattern","partial","sorted-set","drop-last","map","select-keys","zipmap","rseq","compare","split-with","int","seq","cond->","range","not-every?","drop-while","peek","subs","take-nth","nthrest","vec","as->","integer?","min","bit-flip","defn","max-key","=","list","constantly","into-array","fnil","*","next","bit-test","keys","subvec","contains?","<=","some->","if-not","sorted-map-by","keep","declare","when-first","nthnext","to-array-2d","find","number?","dissoc","when-some","vector?","remove-watch","bit-or","not","reductions","doall","if-let","doseq","sequential?","get-validator","some-fn","update-in","hash-map","/","str","pop","reverse","rand","every?","-","key","repeat","true?","second","iterate","false?","max","cycle","lazy-cat","get-in","nth","compare-and-set!","comp","partition","fn","for","shuffle","bit-xor","take","rest","identical?","reduce-kv","merge-with","count","dorun","empty?","cons","swap!","rand-int","sort","re-seq","re-find","not-any?","apply","frequencies","ifn?","partition-by","some?","rem","sorted-map","distinct","bit-and","name","nil?","bit-and-not","map-indexed","split-at","counted?","replace","associative?","cond","realized?","if","let","drop","vals","inc","sort-by","when-let","char","not=","atom","vector","if-some","take-while","or","identity","list?","odd?","case","remove","interleave","map?","bit-not","rand-nth","lazy-seq","partition-all","mapcat",">=","concat","filter","take-last","sorted-set-by","empty","condp","unsigned-bit-shift-right","complement","when","every-pred","subseq","reset!","neg?","string?","sorted?","->","set-validator!","and","hash-set","set?","group-by","deref","mod","do","some->>","not-empty","last","interpose","<","pos?","min-key","conj","tree-seq","while","bit-shift-right","->>","instance?","memoize","array-map","add-watch","zero?","defn-","set","some","fn?","juxt","seq?","filterv","bit-set","quot","def","coll?","reduce","bit-shift-left","re-matches","flatten","nnext","bit-clear","repeatedly","dotimes","nfirst","assoc-in","assoc","mapv","into","when-not","dec","disj","==","get","distinct?","merge","+","list*","even?","cond->>","rsubseq","reversible?","keep-indexed","letfn","ns","ffirst","first","val",">","fnext"],["Return a seq of all but the last item in coll, in linear time","Returns an instance of java.util.regex.Pattern, for use, e.g. in re-matcher.","Takes a function f and fewer than the normal arguments to f, and returns a fn that takes a variable number of additional args. When called, the returned function calls f with args + additional args.","Returns a new sorted set with supplied keys.  Any equal keys are handled as if by repeated uses of conj.","Return a lazy sequence of all but the last n (default 1) items in coll","Returns a lazy sequence consisting of the result of applying f to the set of first items of each coll, followed by applying f to the set of second items in each coll, until any one of the colls is exhausted.","Returns a map containing only those entries in map whose key is in keys","Returns a map with the keys mapped to the corresponding vals.","Returns, in constant time, a seq of the items in rev (which can be a vector or sorted-map), in reverse order.","Returns a negative number, zero, or a positive number when x is logically 'less than', 'equal to', or 'greater than' y.","Returns a vector of [(take-while pred coll) (drop-while pred coll)]","Coerce to int","Returns a seq on the collection.","Threads expr (via ->) through each form for which the corresponding test expression is true.","Returns a lazy seq of nums from start (inclusive) to end (exclusive), by step, where start defaults to 0, step to 1, and end to infinity.","Returns false if (pred x) is logical true for every x in coll, else true.","Returns a lazy sequence of the items in coll starting from the first item for which (pred item) returns logical false.","For a list or queue, same as first, for a vector, same as, but much more efficient than, last.","Returns the substring of s beginning at start inclusive, and ending at end (defaults to length of string), exclusive.","Returns a lazy seq of every nth item in coll.","Returns the nth rest of coll, coll when n is 0.","Creates a new vector containing the contents of coll.","Binds name to expr, evaluates the first form in the lexical context of that binding, then binds name to that result, repeating for each successive form, returning the result of the last form.","Returns true if n is an integer","Returns the least of the nums.","Flip bit at index n","Same as (def name (fn [params* ] exprs*))","Returns the x for which (k x), a number, is greatest.","Returns true if x equals y, false if not.","Creates a new list containing the items.","Returns a function that takes any number of arguments and returns x.","Returns an array with components set to the values in aseq.","Takes a function f, and returns a function that calls f, replacing a nil first argument to f with the supplied value x.","Returns the product of nums.","Returns a seq of the items after the first.","Test bit at index n","Returns a sequence of the map's keys, in the same order as (seq map).","Returns a persistent vector of the items in vector from start (inclusive) to end (exclusive).","Returns true if key is present in the given collection, otherwise returns false.","Returns non-nil if nums are in monotonically non-decreasing order, otherwise false.","When expr is not nil, threads it into the first form (via ->), and when that result is not nil, through the next etc","Evaluates test. If logical false, evaluates and returns then expr, otherwise else expr, if supplied, else nil.","Returns a new sorted map with supplied mappings, using the supplied comparator.","Returns a lazy sequence of the non-nil results of (f item). Note, this means false return values will be included.","defs the supplied var names with no bindings","Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once","Returns the nth next of coll, (seq coll) when n is 0.","Returns a (potentially-ragged) 2-dimensional array of Objects containing the contents of coll, which can be any Collection of any Collection.","Returns the map entry for key, or nil if key not present.","Returns true if x is a Number","dissoc[iate]. Returns a new map of the same (hashed/sorted) type, that does not contain a mapping for key(s).","When test is not nil, evaluates body with binding-form bound to the value of test","Return true if x implements IPersistentVector","Removes a watch (set by add-watch) from a reference","Bitwise or","Returns true if x is logical false, false otherwise.","Returns a lazy seq of the intermediate values of the reduction (as per reduce) of coll by f, starting with init.","Walks through the successive nexts of the seq, retains the head and returns it, thus causing the entire seq to reside in memory at one time.","If test is true, evaluates then with binding-form bound to the value of test, if not, yields else","Repeatedly executes body (presumably for side-effects) with bindings and filtering as provided by \"for\".","Returns true if coll implements Sequential","Gets the validator-fn for a var/ref/agent/atom.","Takes a set of predicates and returns a function f that returns the first logical true value returned by one of its composing predicates against any of its arguments, else it returns logical false.","'Updates' a value in a nested associative structure, where ks is a sequence of keys and f is a function that will take the old value and any supplied args and return the new value, and returns a new nested structure.","Returns a new hash map with supplied mappings.","If no denominators are supplied, returns 1/numerator, else returns numerator divided by all of the denominators.","With more than one arg, returns the concatenation of the str values of the args.","For a list or queue, returns a new list/queue without the first item, for a vector, returns a new vector without the last item.","Returns a seq of the items in coll in reverse order. Not lazy.","Returns a random floating point number between 0 (inclusive) and n (default 1) (exclusive).","Returns true if (pred x) is logical true for every x in coll, else false.","If no ys are supplied, returns the negation of x, else subtracts the ys from x and returns the result.","Returns the key of the map entry.","Returns a lazy (infinite!, or length n if supplied) sequence of xs.","Returns true if x is the value true, false otherwise.","Same as (first (next x))","Returns a lazy sequence of x, (f x), (f (f x)) etc.","Returns true if x is the value false, false otherwise.","Returns the greatest of the nums.","Returns a lazy (infinite!) sequence of repetitions of the items in coll.","Expands to code which yields a lazy sequence of the concatenation of the supplied colls.","Returns the value in a nested associative structure, where ks is a sequence of keys.","Returns the value at the index.","Atomically sets the value of atom to newval if and only if the current value of the atom is identical to oldval. Returns true if set happened, else false","Takes a set of functions and returns a fn that is the composition of those fns.","Returns a lazy sequence of lists of n items each, at offsets step apart.","Defines a function","Takes a vector of one or more binding-form/collection-expr pairs, each followed by zero or more modifiers, and yields a lazy sequence of evaluations of expr.","Return a random permutation of coll","Bitwise exclusive or","Returns a lazy sequence of the first n items in coll, or all items if there are fewer than n.","Returns a possibly empty seq of the items after the first.","Tests if 2 arguments are the same object","Reduces an associative collection. f should be a function of 3 arguments. Returns the result of applying f to init, the first key and the first value in coll, then applying f to that result and the 2nd key and value, etc. If coll contains no entries, returns init and f is not called.","Returns a map that consists of the rest of the maps conj-ed onto the first.  If a key occurs in more than one map, the mapping(s) from the latter (left-to-right) will be combined with the mapping in the result by calling (f val-in-result val-in-latter).","Returns the number of items in the collection.","Walks through the successive nexts of the seq, does not retain the head and returns nil.","Returns true if coll has no items - same as (not (seq coll)).","Returns a new seq where x is the first element and seq is the rest.","Atomically swaps the value of atom to be: (apply f current-value-of-atom args).","Returns a random integer between 0 (inclusive) and n (exclusive).","Returns a sorted sequence of the items in coll.","Returns a lazy sequence of successive matches of pattern in string, using java.util.regex.Matcher.find(), each such match processed with re-groups.","Returns the next regex match, if any, of string to pattern, using java.util.regex.Matcher.find().  Uses re-groups to return the groups.","Returns false if (pred x) is logical true for any x in coll, else true.","Applies fn f to the argument list formed by prepending intervening arguments to args.","Returns a map from distinct items in coll to the number of times they appear.","Returns true if x implements IFn. Note that many data structures (e.g. sets and maps) implement IFn","Applies f to each value in coll, splitting it each time f returns a new value.  Returns a lazy seq of partitions.","Returns true if x is not nil, false otherwise.","remainder of dividing numerator by denominator.","Returns a new sorted map with supplied mappings.","Returns a lazy sequence of the elements of coll with duplicates removed.","Bitwise and","Returns the name String of a string, symbol or keyword.","Returns true if x is nil, false otherwise.","Bitwise and with complement","Returns a lazy sequence consisting of the result of applying f to 0 and the first item of coll, followed by applying f to 1 and the second item in coll, etc, until coll is exhausted.","Returns a vector of [(take n coll) (drop n coll)]","Returns true if coll implements count in constant time","Given a map of replacement pairs and a vector/collection, returns a vector/seq with any elements = a key in smap replaced with the corresponding val in smap.","Returns true if coll implements Associative","If a test returns logical true, cond evaluates and returns the value of the corresponding expr and doesn't evaluate any of the other tests or exprs.","Returns true if a value has been produced for a promise, delay, future or lazy sequence.","Evaluates test.","Evaluates the exprs in a lexical context in which the symbols in the binding-forms are bound to their respective init-exprs or parts therein.","Returns a lazy sequence of all but the first n items in coll.","Returns a sequence of the map's values, in the same order as (seq map).","Returns a number one greater than num.","Returns a sorted sequence of the items in coll, where the sort order is determined by comparing (keyfn item) .","When test is true, evaluates body with binding-form bound to the value of test","Coerce to char","Same as (not (= obj1 obj2))","Creates and returns an Atom with an initial value of x","Creates a new vector containing the args.","If test is not nil, evaluates then with binding-form bound to the value of test, if not, yields else","Returns a lazy sequence of successive items from coll while (pred item) returns logical true.","If a form returns a logical true value, or returns that value and doesn't evaluate any of the other expressions, otherwise it returns the value of the last expression.","Returns its argument.","Returns true if x implements IPersistentList","Returns true if n is odd","If the expression is equal to a test-constant, the corresponding result-expr is returned.","Returns a lazy sequence of the items in coll for which (pred item) returns logical false.","Returns a lazy seq of the first item in each coll, then the second etc.","Return true if x implements IPersistentMap","Bitwise complement","Return a random element of the (sequential) collection.","Takes a body of expressions that returns an ISeq or nil, and yields a Seqable object that will invoke the body only the first time seq is called, and will cache the result and return it on all subsequent seq calls.","Returns a lazy sequence of lists like partition, but may include partitions with fewer than n items at the end.","Returns the result of applying concat to the result of applying map to f and colls.","Returns non-nil if nums are in monotonically non-increasing order, otherwise false.","Returns a lazy seq representing the concatenation of the elements in the supplied colls.","Returns a lazy sequence of the items in coll for which (pred item) returns logical true.","Returns a seq of the last n items in coll.","Returns a new sorted set with supplied keys, using the supplied comparator.  Any equal keys are handled as if by repeated uses of conj.","Returns an empty collection of the same category as coll, or nil","If a binary clause matches, the result-expr is returned","Bitwise shift right, without sign-extension.","Takes a fn f and returns a fn that takes the same arguments as f, has the same effects, if any, and returns the opposite truth value.","Evaluates test. If logical true, evaluates body in an implicit do.","Takes a set of predicates and returns a function f that returns true if all of its composing predicates return a logical true value against all of its arguments, else it returns false.","sc must be a sorted collection, test(s) one of <, <=, > or >=. Returns a seq of those entries with keys ek for which (test (.. sc comparator (compare ek key)) 0) is true","Sets the value of atom to newval without regard for the current value. Returns newval.","Returns true if num is less than zero, else false","Return true if x is a String","Returns true if coll implements Sorted","Threads the expr through the forms. Inserts x as the second item in the first form.","Sets the validator-fn for a var/ref/agent/atom.","If a form returns logical false (nil or false), and returns that value and doesn't evaluate any of the other expressions, otherwise it returns the value of the last expr.","Returns a new hash set with supplied keys.  Any equal keys are handled as if by repeated uses of conj.","Returns true if x implements IPersistentSet","Returns a map of the elements of coll keyed by the result of f on each element.","Within a transaction, returns the in-transaction-value of ref, else returns the most-recently-committed value of ref.","Modulus of num and div. Truncates toward negative infinity.","Evaluates the expressions in order and returns the value of the last.","When expr is not nil, threads it into the first form (via ->>), and when that result is not nil, through the next etc","If coll is empty, returns nil, else coll","Return the last item in coll, in linear time","Returns a lazy seq of the elements of coll separated by sep.","Returns non-nil if nums are in monotonically increasing order, otherwise false.","Returns true if num is greater than zero, else false","Returns the x for which (k x), a number, is least.","conj[oin]. Returns a new collection with the xs 'added'.","Returns a lazy sequence of the nodes in a tree, via a depth-first walk.","Repeatedly executes body while test expression is true.","Bitwise shift right","Threads the expr through the forms. Inserts x as the last item in the first form.","Evaluates x and tests if it is an instance of the class c.","Returns a memoized version of a referentially transparent function. The memoized version of the function keeps a cache of the mapping from arguments to results and, when calls with the same arguments are repeated often, has higher performance at the expense of higher memory use.","Constructs an array-map.","Adds a watch function to an agent/atom/var/ref reference.","Returns true if num is zero, else false","same as defn, yielding non-public def","Returns a set of the distinct elements of coll.","Returns the first logical true value of (pred x) for any x in coll, else nil.","Returns true if x implements Fn, i.e. is an object created via fn.","Takes a set of functions and returns a fn that is the juxtaposition of those fns.","Return true if x implements ISeq","Returns a vector of the items in coll for which (pred item) returns logical true.","Set bit at index n","quot[ient] of dividing numerator by denominator.","Creates and interns or locates a global var with the name of symbol and a namespace of the value of the current namespace (*ns*).","Returns true if x implements IPersistentCollection","If val is not supplied, returns the result of applying f to the first 2 items in coll, then applying f to that result and the 3rd item, etc.","Bitwise shift left","Returns the match, if any, of string to pattern, using java.util.regex.Matcher.matches().  Uses re-groups to return the groups.","Takes any nested combination of sequential things (lists, vectors etc.) and returns their contents as a single, flat sequence.","Same as (next (next x))","Clear bit at index n","Takes a function of no args, presumably with side effects, and returns an infinite (or length n if supplied) lazy sequence of calls to it","Repeatedly executes body (presumably for side-effects) with name bound to integers from 0 through n-1.","Same as (next (first x))","Associates a value in a nested associative structure, where ks is a sequence of keys and v is the new value and returns a new nested structure.","assoc[iate]. When applied to a map, returns a new map of the same (hashed/sorted) type, that contains the mapping of key(s) to val(s). When applied to a vector, returns a new vector that contains val at index.","Returns a vector consisting of the result of applying f to the set of first items of each coll, followed by applying f to the set of second items in each coll, until any one of the colls is exhausted.","Returns a new coll consisting of to-coll with all of the items of from-coll conjoined.","Evaluates test. If logical false, evaluates body in an implicit do.","Returns a number one less than num.","disj[oin]. Returns a new set of the same (hashed/sorted) type, that does not contain key(s).","Returns non-nil if nums all have the equivalent value (type-independent), otherwise false","Returns the value mapped to key","Returns true if no two of the arguments are =","Returns a map that consists of the rest of the maps conj-ed onto the first. If a key occurs in more than one map, the mapping from the latter (left-to-right) will be the mapping in the result.","Returns the sum of nums.","Creates a new seq containing the items prepended to the rest, the last of which will be treated as a sequence.","Returns true if n is even","Threads expr (via ->>) through each form for which the corresponding test expression is true.","sc must be a sorted collection, test(s) one of <, <=, > or >=. Returns a reverse seq of those entries with keys ek for which (test (.. sc comparator (compare ek key)) 0) is true","Returns true if coll implements Reversible","Returns a lazy sequence of the non-nil results of (f index item).","Takes a vector of function specs and a body, and generates a set of bindings of functions to their names.","Sets *ns* to the namespace named by name (unevaluated), creating it if needed.","Same as (first (first x))","Returns the first item in the collection.","Returns the value in the map entry.","Returns non-nil if nums are in monotonically decreasing order, otherwise false.","Same as (first (next x))"]);
