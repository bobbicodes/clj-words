(ns clj-words.data)

(def fn-map
  {"fn" "Defines a function"
   "defn" "Same as (def name (fn [params* ] exprs*))"
   "defn-" "same as defn, yielding non-public def"
   "def" "Creates and interns or locates a global var with the name of symbol and a namespace of the value of the current namespace (*ns*)."
   "let" "Evaluates the exprs in a lexical context in which the symbols in the binding-forms are bound to their respective init-exprs or parts therein."
   "letfn" "Takes a vector of function specs and a body, and generates a set of bindings of functions to their names."
   "declare" "defs the supplied var names with no bindings"
   "ns" "Sets *ns* to the namespace named by name (unevaluated), creating it if needed."
   "if" "Evaluates test."
   "if-not" "Evaluates test. If logical false, evaluates and returns then expr, otherwise else expr, if supplied, else nil."
   "when" "Evaluates test. If logical true, evaluates body in an implicit do."
   "when-not" "Evaluates test. If logical false, evaluates body in an implicit do."
   "when-let" "When test is true, evaluates body with binding-form bound to the value of test"
   "when-first" "Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once"
   "if-let" "If test is true, evaluates then with binding-form bound to the value of test, if not, yields else"
   "cond" "If a test returns logical true, cond evaluates and returns the value of the corresponding expr and doesn't evaluate any of the other tests or exprs."
   "condp" "If a binary clause matches, the result-expr is returned"
   "do" "Evaluates the expressions in order and returns the value of the last."
   "case" "If the expression is equal to a test-constant, the corresponding result-expr is returned."
   "when-some" "When test is not nil, evaluates body with binding-form bound to the value of test"
   "if-some" "If test is not nil, evaluates then with binding-form bound to the value of test, if not, yields else"
   "and" "If a form returns logical false (nil or false), and returns that value and doesn't evaluate any of the other expressions, otherwise it returns the value of the last expr."
   "or" "If a form returns a logical true value, or returns that value and doesn't evaluate any of the other expressions, otherwise it returns the value of the last expression."
   "for" "Takes a vector of one or more binding-form/collection-expr pairs, each followed by zero or more modifiers, and yields a lazy sequence of evaluations of expr."
   "doseq" "Repeatedly executes body (presumably for side-effects) with bindings and filtering as provided by \"for\"."
   "dotimes" "Repeatedly executes body (presumably for side-effects) with name bound to integers from 0 through n-1."
   "while" "Repeatedly executes body while test expression is true."
   "->" "Threads the expr through the forms. Inserts x as the second item in the first form."
   "->>" "Threads the expr through the forms. Inserts x as the last item in the first form."
   "as->" "Binds name to expr, evaluates the first form in the lexical context of that binding, then binds name to that result, repeating for each successive form, returning the result of the last form."
   "cond->" "Threads expr (via ->) through each form for which the corresponding test expression is true."
   "cond->>" "Threads expr (via ->>) through each form for which the corresponding test expression is true."
   "some->" "When expr is not nil, threads it into the first form (via ->), and when that result is not nil, through the next etc"
   "some->>" "When expr is not nil, threads it into the first form (via ->>), and when that result is not nil, through the next etc"
   "lazy-cat" "Expands to code which yields a lazy sequence of the concatenation of the supplied colls."
   "lazy-seq" "Takes a body of expressions that returns an ISeq or nil, and yields a Seqable object that will invoke the body only the first time seq is called, and will cache the result and return it on all subsequent seq calls."
   "=" "Returns true if x equals y, false if not."
   "==" "Returns non-nil if nums all have the equivalent value (type-independent), otherwise false"
   "not=" "Same as (not (= obj1 obj2))"
   "not" "Returns true if x is logical false, false otherwise."
   "identical?" "Tests if 2 arguments are the same object"
   "compare" "Returns a negative number, zero, or a positive number when x is logically 'less than', 'equal to', or 'greater than' y."
   "map" "Returns a lazy sequence consisting of the result of applying f to the set of first items of each coll, followed by applying f to the set of second items in each coll, until any one of the colls is exhausted."
   "map-indexed" "Returns a lazy sequence consisting of the result of applying f to 0 and the first item of coll, followed by applying f to 1 and the second item in coll, etc, until coll is exhausted."
   "reduce" "If val is not supplied, returns the result of applying f to the first 2 items in coll, then applying f to that result and the 3rd item, etc."
   "true?" "Returns true if x is the value true, false otherwise."
   "false?" "Returns true if x is the value false, false otherwise."
   "instance?" "Evaluates x and tests if it is an instance of the class c."
   "nil?" "Returns true if x is nil, false otherwise."
   "some" "Returns the first logical true value of (pred x) for any x in coll, else nil."
   "some?" "Returns true if x is not nil, false otherwise."
   "+" "Returns the sum of nums."
   "-" "If no ys are supplied, returns the negation of x, else subtracts the ys from x and returns the result."
   "*" "Returns the product of nums."
   "/" "If no denominators are supplied, returns 1/numerator, else returns numerator divided by all of the denominators."
   "quot" "quot[ient] of dividing numerator by denominator."
   "rem" "remainder of dividing numerator by denominator."
   "mod" "Modulus of num and div. Truncates toward negative infinity."
   "inc" "Returns a number one greater than num."
   "dec" "Returns a number one less than num."
   "max" "Returns the greatest of the nums."
   "min" "Returns the least of the nums."
   "<" "Returns non-nil if nums are in monotonically increasing order, otherwise false."
   ">" "Returns non-nil if nums are in monotonically decreasing order, otherwise false."
   "<=" "Returns non-nil if nums are in monotonically non-decreasing order, otherwise false."
   ">=" "Returns non-nil if nums are in monotonically non-increasing order, otherwise false."
   "int" "Coerce to int"
   "zero?" "Returns true if num is zero, else false"
   "pos?" "Returns true if num is greater than zero, else false"
   "neg?" "Returns true if num is less than zero, else false"
   "even?" "Returns true if n is even"
   "odd?" "Returns true if n is odd"
   "number?" "Returns true if x is a Number"
   "integer?" "Returns true if n is an integer"
   "rand" "Returns a random floating point number between 0 (inclusive) and n (default 1) (exclusive)."
   "rand-int" "Returns a random integer between 0 (inclusive) and n (exclusive)."
   "atom" "Creates and returns an Atom with an initial value of x"
   "deref" "Within a transaction, returns the in-transaction-value of ref, else returns the most-recently-committed value of ref."
   "swap!" "Atomically swaps the value of atom to be: (apply f current-value-of-atom args)."
   "reset!" "Sets the value of atom to newval without regard for the current value. Returns newval."
   "compare-and-set!" "Atomically sets the value of atom to newval if and only if the current value of the atom is identical to oldval. Returns true if set happened, else false"
   "add-watch" "Adds a watch function to an agent/atom/var/ref reference."
   "remove-watch" "Removes a watch (set by add-watch) from a reference"
   "set-validator!" "Sets the validator-fn for a var/ref/agent/atom."
   "get-validator" "Gets the validator-fn for a var/ref/agent/atom."
   "identity" "Returns its argument."
   "constantly" "Returns a function that takes any number of arguments and returns x."
   "comp" "Takes a set of functions and returns a fn that is the composition of those fns."
   "complement" "Takes a fn f and returns a fn that takes the same arguments as f, has the same effects, if any, and returns the opposite truth value."
   "partial" "Takes a function f and fewer than the normal arguments to f, and returns a fn that takes a variable number of additional args. When called, the returned function calls f with args + additional args."
   "juxt" "Takes a set of functions and returns a fn that is the juxtaposition of those fns."
   "memoize" "Returns a memoized version of a referentially transparent function. The memoized version of the function keeps a cache of the mapping from arguments to results and, when calls with the same arguments are repeated often, has higher performance at the expense of higher memory use."
   "fnil" "Takes a function f, and returns a function that calls f, replacing a nil first argument to f with the supplied value x."
   "every-pred" "Takes a set of predicates and returns a function f that returns true if all of its composing predicates return a logical true value against all of its arguments, else it returns false."
   "some-fn" "Takes a set of predicates and returns a function f that returns the first logical true value returned by one of its composing predicates against any of its arguments, else it returns logical false."
   "apply" "Applies fn f to the argument list formed by prepending intervening arguments to args."
   "fn?" "Returns true if x implements Fn, i.e. is an object created via fn."
   "ifn?" "Returns true if x implements IFn. Note that many data structures (e.g. sets and maps) implement IFn"
   "str" "With more than one arg, returns the concatenation of the str values of the args."
   "name" "Returns the name String of a string, symbol or keyword."
   "count" "Returns the number of items in the collection."
   "subs" "Returns the substring of s beginning at start inclusive, and ending at end (defaults to length of string), exclusive."
   "replace" "Given a map of replacement pairs and a vector/collection, returns a vector/seq with any elements = a key in smap replaced with the corresponding val in smap."
   "reverse" "Returns a seq of the items in coll in reverse order. Not lazy."
   "re-find" "Returns the next regex match, if any, of string to pattern, using java.util.regex.Matcher.find().  Uses re-groups to return the groups."
   "re-seq" "Returns a lazy sequence of successive matches of pattern in string, using java.util.regex.Matcher.find(), each such match processed with re-groups."
   "re-matches" "Returns the match, if any, of string to pattern, using java.util.regex.Matcher.matches().  Uses re-groups to return the groups."
   "re-pattern" "Returns an instance of java.util.regex.Pattern, for use, e.g. in re-matcher."
   "char" "Coerce to char"
   "string?" "Return true if x is a String"
   "empty" "Returns an empty collection of the same category as coll, or nil"
   "not-empty" "If coll is empty, returns nil, else coll"
   "into" "Returns a new coll consisting of to-coll with all of the items of from-coll conjoined."
   "conj" "conj[oin]. Returns a new collection with the xs 'added'."
   "distinct" "Returns a lazy sequence of the elements of coll with duplicates removed."
   "distinct?" "Returns true if no two of the arguments are ="
   "empty?" "Returns true if coll has no items - same as (not (seq coll))."
   "every?" "Returns true if (pred x) is logical true for every x in coll, else false."
   "not-every?" "Returns false if (pred x) is logical true for every x in coll, else true."
   "not-any?" "Returns false if (pred x) is logical true for any x in coll, else true."
   "sequential?" "Returns true if coll implements Sequential"
   "associative?" "Returns true if coll implements Associative"
   "sorted?" "Returns true if coll implements Sorted"
   "counted?" "Returns true if coll implements count in constant time"
   "reversible?" "Returns true if coll implements Reversible"
   "coll?" "Returns true if x implements IPersistentCollection"
   "list?" "Returns true if x implements IPersistentList"
   "vector?" "Return true if x implements IPersistentVector"
   "set?" "Returns true if x implements IPersistentSet"
   "map?" "Return true if x implements IPersistentMap"
   "seq?" "Return true if x implements ISeq"
   "vec" "Creates a new vector containing the contents of coll."
   "vector" "Creates a new vector containing the args."
   "nth" "Returns the value at the index."
   "get" "Returns the value mapped to key"
   "peek" "For a list or queue, same as first, for a vector, same as, but much more efficient than, last."
   "assoc" "assoc[iate]. When applied to a map, returns a new map of the same (hashed/sorted) type, that contains the mapping of key(s) to val(s). When applied to a vector, returns a new vector that contains val at index."
   "pop" "For a list or queue, returns a new list/queue without the first item, for a vector, returns a new vector without the last item."
   "subvec" "Returns a persistent vector of the items in vector from start (inclusive) to end (exclusive)."
   "rseq" "Returns, in constant time, a seq of the items in rev (which can be a vector or sorted-map), in reverse order."
   "mapv" "Returns a vector consisting of the result of applying f to the set of first items of each coll, followed by applying f to the set of second items in each coll, until any one of the colls is exhausted."
   "filterv" "Returns a vector of the items in coll for which (pred item) returns logical true."
   "reduce-kv" "Reduces an associative collection. f should be a function of 3 arguments. Returns the result of applying f to init, the first key and the first value in coll, then applying f to that result and the 2nd key and value, etc. If coll contains no entries, returns init and f is not called."
   "hash-map" "Returns a new hash map with supplied mappings."
   "array-map" "Constructs an array-map."
   "zipmap" "Returns a map with the keys mapped to the corresponding vals."
   "sorted-map" "Returns a new sorted map with supplied mappings."
   "sorted-map-by" "Returns a new sorted map with supplied mappings, using the supplied comparator."
   "frequencies" "Returns a map from distinct items in coll to the number of times they appear."
   "group-by" "Returns a map of the elements of coll keyed by the result of f on each element."
   "get-in" "Returns the value in a nested associative structure, where ks is a sequence of keys."
   "contains?" "Returns true if key is present in the given collection, otherwise returns false."
   "find" "Returns the map entry for key, or nil if key not present."
   "key" "Returns the key of the map entry."
   "keys" "Returns a sequence of the map's keys, in the same order as (seq map)."
   "val" "Returns the value in the map entry."
   "vals" "Returns a sequence of the map's values, in the same order as (seq map)."
   "assoc-in" "Associates a value in a nested associative structure, where ks is a sequence of keys and v is the new value and returns a new nested structure."
   "dissoc" "dissoc[iate]. Returns a new map of the same (hashed/sorted) type, that does not contain a mapping for key(s)."
   "merge" "Returns a map that consists of the rest of the maps conj-ed onto the first. If a key occurs in more than one map, the mapping from the latter (left-to-right) will be the mapping in the result."
   "merge-with" "Returns a map that consists of the rest of the maps conj-ed onto the first.  If a key occurs in more than one map, the mapping(s) from the latter (left-to-right) will be combined with the mapping in the result by calling (f val-in-result val-in-latter)."
   "select-keys" "Returns a map containing only those entries in map whose key is in keys"
   "update-in" "'Updates' a value in a nested associative structure, where ks is a sequence of keys and f is a function that will take the old value and any supplied args and return the new value, and returns a new nested structure."
   "subseq" "sc must be a sorted collection, test(s) one of <, <=, > or >=. Returns a seq of those entries with keys ek for which (test (.. sc comparator (compare ek key)) 0) is true"
   "rsubseq" "sc must be a sorted collection, test(s) one of <, <=, > or >=. Returns a reverse seq of those entries with keys ek for which (test (.. sc comparator (compare ek key)) 0) is true"
   "list" "Creates a new list containing the items."
   "list*" "Creates a new seq containing the items prepended to the rest, the last of which will be treated as a sequence."
   "first" "Returns the first item in the collection."
   "rest" "Returns a possibly empty seq of the items after the first."
   "cons" "Returns a new seq where x is the first element and seq is the rest."
   "set" "Returns a set of the distinct elements of coll."
   "hash-set" "Returns a new hash set with supplied keys.  Any equal keys are handled as if by repeated uses of conj."
   "sorted-set" "Returns a new sorted set with supplied keys.  Any equal keys are handled as if by repeated uses of conj."
   "sorted-set-by" "Returns a new sorted set with supplied keys, using the supplied comparator.  Any equal keys are handled as if by repeated uses of conj."
   "disj" "disj[oin]. Returns a new set of the same (hashed/sorted) type, that does not contain key(s)."
   "filter" "Returns a lazy sequence of the items in coll for which (pred item) returns logical true."
   "remove" "Returns a lazy sequence of the items in coll for which (pred item) returns logical false."
   "take-nth" "Returns a lazy seq of every nth item in coll."
   "concat" "Returns a lazy seq representing the concatenation of the elements in the supplied colls."
   "mapcat" "Returns the result of applying concat to the result of applying map to f and colls."
   "cycle" "Returns a lazy (infinite!) sequence of repetitions of the items in coll."
   "interleave" "Returns a lazy seq of the first item in each coll, then the second etc."
   "interpose" "Returns a lazy seq of the elements of coll separated by sep."
   "nthrest" "Returns the nth rest of coll, coll when n is 0."
   "next" "Returns a seq of the items after the first."
   "fnext" "Same as (first (next x))"
   "nnext" "Same as (next (next x))"
   "drop" "Returns a lazy sequence of all but the first n items in coll."
   "drop-while" "Returns a lazy sequence of the items in coll starting from the first item for which (pred item) returns logical false."
   "take-last" "Returns a seq of the last n items in coll."
   "take" "Returns a lazy sequence of the first n items in coll, or all items if there are fewer than n."
   "take-while" "Returns a lazy sequence of successive items from coll while (pred item) returns logical true."
   "butlast" "Return a seq of all but the last item in coll, in linear time"
   "drop-last" "Return a lazy sequence of all but the last n (default 1) items in coll"
   "flatten" "Takes any nested combination of sequential things (lists, vectors etc.) and returns their contents as a single, flat sequence."
   "partition" "Returns a lazy sequence of lists of n items each, at offsets step apart."
   "partition-all" "Returns a lazy sequence of lists like partition, but may include partitions with fewer than n items at the end."
   "partition-by" "Applies f to each value in coll, splitting it each time f returns a new value.  Returns a lazy seq of partitions."
   "split-at" "Returns a vector of [(take n coll) (drop n coll)]"
   "split-with" "Returns a vector of [(take-while pred coll) (drop-while pred coll)]"
   "shuffle" "Return a random permutation of coll"
   "sort" "Returns a sorted sequence of the items in coll."
   "sort-by" "Returns a sorted sequence of the items in coll, where the sort order is determined by comparing (keyfn item) ."
   "second" "Same as (first (next x))"
   "last" "Return the last item in coll, in linear time"
   "ffirst" "Same as (first (first x))"
   "nfirst" "Same as (next (first x))"
   "nthnext" "Returns the nth next of coll, (seq coll) when n is 0."
   "rand-nth" "Return a random element of the (sequential) collection."
   "max-key" "Returns the x for which (k x), a number, is greatest."
   "min-key" "Returns the x for which (k x), a number, is least."
   "reductions" "Returns a lazy seq of the intermediate values of the reduction (as per reduce) of coll by f, starting with init."
   "into-array" "Returns an array with components set to the values in aseq."
   "to-array-2d" "Returns a (potentially-ragged) 2-dimensional array of Objects containing the contents of coll, which can be any Collection of any Collection."
   "dorun" "Walks through the successive nexts of the seq, does not retain the head and returns nil."
   "doall" "Walks through the successive nexts of the seq, retains the head and returns it, thus causing the entire seq to reside in memory at one time."
   "realized?" "Returns true if a value has been produced for a promise, delay, future or lazy sequence."
   "seq" "Returns a seq on the collection."
   "repeat" "Returns a lazy (infinite!, or length n if supplied) sequence of xs."
   "repeatedly" "Takes a function of no args, presumably with side effects, and returns an infinite (or length n if supplied) lazy sequence of calls to it"
   "iterate" "Returns a lazy sequence of x, (f x), (f (f x)) etc."
   "range" "Returns a lazy seq of nums from start (inclusive) to end (exclusive), by step, where start defaults to 0, step to 1, and end to infinity."
   "tree-seq" "Returns a lazy sequence of the nodes in a tree, via a depth-first walk."
   "keep" "Returns a lazy sequence of the non-nil results of (f item). Note, this means false return values will be included."
   "keep-indexed" "Returns a lazy sequence of the non-nil results of (f index item)."
   "bit-and" "Bitwise and"
   "bit-or" "Bitwise or"
   "bit-xor" "Bitwise exclusive or"
   "bit-not" "Bitwise complement"
   "bit-flip" "Flip bit at index n"
   "bit-set" "Set bit at index n"
   "bit-shift-right" "Bitwise shift right"
   "bit-shift-left" "Bitwise shift left"
   "bit-and-not" "Bitwise and with complement"
   "bit-clear" "Clear bit at index n"
   "bit-test" "Test bit at index n"
   "unsigned-bit-shift-right" "Bitwise shift right, without sign-extension."})
